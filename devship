#!/usr/bin/env bash
set -e

#----------------------------------------------
# Configuration variables with default value
#----------------------------------------------
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
USER_SHELL_NAME="$(echo $SHELL | cut -d \/ -f 3)"
CLUSTER_NAME=devship
CLUSTER_DOMAIN=devship.localhost
CLUSTER_API_PORT=6443
CLUSTER_K3S_IMAGE_TAG=latest
CLUSTER_VOLUME_HOST_PATH=${CLUSTER_VOLUME_HOST_PATH:-${HOME}/devship/${CLUSTER_NAME}}
LB_HTTP_PORT=80
LB_HTTPS_PORT=443
USER_INPUT=
SERVERS=1
AGENTS=1
CONTAINER_RUNTIME=docker

# Addons
K3S_TRAEFIK_ARGS=""
DISABLE_BUILITIN_TRAEFIK=Yes
INSTALL_LOCAL_REGISTRY=Yes
INSTALL_INGRESS=Yes
INSTALL_DASHBOARD=No
INSTALL_PROMETHEUS=No

# Tls
INSTALL_SERVICE_TLS=No
CLUSTER_TLS_MANIFEST=""

# Local Registry
LOCAL_REGISTRY_HOST="0.0.0.0"
LOCAL_REGISTRY_NAME="registry.${CLUSTER_DOMAIN}"
LOCAL_REGISTRY_PORT=5000
LOCAL_REGISTRY_MANIFEST=""
LOCAL_REGISTRY_VOL_HOSTPATH=${LOCAL_REGISTRY_VOL_HOSTPATH:-${HOME}/devship/${CLUSTER_NAME}-registry}
CLUSTER_DOCKER_NETWORK=k3d-${CLUSTER_NAME}
CLUSTER_DOCKER_NETWORK_MANIFEST=""

CLUSTER_CUSTOM_MANIFESTS=""


# Persistent Volume
INTALL_CLUSTER_PV=yes
CLUSTER_PV_SIZE=20
CLUSTER_PV_MANIFEST=""

# Typography
BOLD_TXT=$(tput bold)
NORMAL_TXT=$(tput sgr0)
YES_NO="(Yes/No)"

# Colors
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
PINK=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
NOCOLOR=$(tput sgr0)

function isSelected() {
  if [ "${1}" = "Yes" ] || [ "${1}" = "yes" ] || [ "${1}" = "Y" ] || [ "${1}" = "y" ]; then
    echo 1
  else
    echo 0
  fi
}

# $1 text to show - $2 default value
function prompt() {
  read -p "${GREEN}${1}${NOCOLOR} ${WHITE}[${NOCOLOR}${BOLD_TXT}${WHITE}${2}${NOCOLOR}${NORMAL_TXT}${WHITE}]:${NOCOLOR} " USER_INPUT
  if [ "${USER_INPUT}" = "" ]; then
    USER_INPUT=$2
  fi
}

function header() {
  echo -e "\n${GREEN}==> ${BOLD_TXT}${1}${NORMAL_TXT}${NOCOLOR}\n"
}

function footer() {
  echo
}

# Check if exist docker, k3d and kubectl
function checkDependencies() {
  # Check Docker
  if ! type docker >/dev/null; then
    header "Docker is required. Installing it ..."
    case "$OSTYPE" in
    linux*) curl -L -o ${SCRIPT_DIR}/install-docker.sh "https://get.docker.com" && chmod +x ${SCRIPT_DIR}/install-docker.sh && ${SCRIPT_DIR}/install-docker.sh && sudo usermod -aG docker $USER ;;
    darwin*) echo -e "${GREEN}Download Docker Desktop from for macOS from${NOCOLOR} ${BLUE}https://www.docker.com/products/docker-desktop${NOCOLOR}" ;;
    win*) echo -e "${GREEN}Download Docker Desktop from for Windows from${NOCOLOR} ${BLUE}https://www.docker.com/products/docker-desktop${NOCOLOR}" ;;
    *) echo "unsupported: $OSTYPE" && exit 1 ;;
    esac
    rm -f ${SCRIPT_DIR}/install-docker.sh
    footer
    #exit
  fi

  # Check K3D
  if ! type k3d >/dev/null; then
    header "K3D is required. Installing it ..."
    curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
    # Install k3d autocompletion for bash
    echo "source <(k3d completion $USER_SHELL_NAME)" >>~/".${USER_SHELL_NAME}rc"
    footer
    #exit
  fi

  # Check Kubectl
  if ! type kubectl >/dev/null; then
    header "Kubectl is required. Installing it ..."
    curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x ${SCRIPT_DIR}/kubectl
    sudo mv ${SCRIPT_DIR}/kubectl /usr/local/bin/kubectl
    kubectl version --client --output yaml
    echo "source <(kubectl completion $USER_SHELL_NAME)" >>~/".${USER_SHELL_NAME}rc"
    footer
    #exit
  fi

  # Check Helm
  if ! type helm >/dev/null; then
    header "Helm is required. Installing it ..."
    curl -fsSL -o ${SCRIPT_DIR}/get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    chmod +x ${SCRIPT_DIR}/get_helm.sh
    ${SCRIPT_DIR}/get_helm.sh
    echo "source <(helm completion $USER_SHELL_NAME)" >>~/".${USER_SHELL_NAME}rc"

    # Add default repos
    helm repo add stable https://charts.helm.sh/stable
    # Update helm
    helm repo update
    rm -f ${SCRIPT_DIR}/get_helm.sh
    footer
    #exit
  fi
}

function configValues() {
  echo
  prompt "Container Runtime" "${CONTAINER_RUNTIME}"
  CONTAINER_RUNTIME=${USER_INPUT}

  prompt "Cluster Name" "${CLUSTER_NAME}"
  CLUSTER_NAME=${USER_INPUT}

  prompt "Cluster K3s Image Tag" "${CLUSTER_K3S_IMAGE_TAG}"
  CLUSTER_K3S_IMAGE_TAG=${USER_INPUT}

  prompt "Cluster Domain" "${CLUSTER_DOMAIN}"
  CLUSTER_DOMAIN=${USER_INPUT}

  prompt "API Port" "${CLUSTER_API_PORT}"
  CLUSTER_API_PORT=${USER_INPUT}

  prompt "Servers (Masters)" "${SERVERS}"
  SERVERS=${USER_INPUT}

  prompt "Agents (Workers)" "${AGENTS}"
  AGENTS=${USER_INPUT}

  prompt "LoadBalancer HTTP Port" "${LB_HTTP_PORT}"
  LB_HTTP_PORT=${USER_INPUT}

  prompt "LoadBalancer HTTPS Port" "${LB_HTTPS_PORT}"
  LB_HTTPS_PORT=${USER_INPUT}

  prompt "Custom docker network name? " ${CLUSTER_DOCKER_NETWORK}
  CLUSTER_DOCKER_NETWORK=${USER_INPUT}

  prompt "Disable Buitin Traefik? " ${DISABLE_BUILITIN_TRAEFIK}
  if [ $(isSelected ${USER_INPUT}) -eq 1 ]; then
    K3S_TRAEFIK_ARGS="
      - arg: \"--disable=traefik\" # disable traefik
        nodeFilters:
          - server:*"
  fi


  if [ "${USER_INPUT}" != "k3d-${CLUSTER_NAME}" ]; then
    CLUSTER_DOCKER_NETWORK_MANIFEST="network: ${CLUSTER_DOCKER_NETWORK}"
  fi

  prompt "Host path to mount into cluster" "${CLUSTER_VOLUME_HOST_PATH}"
  CLUSTER_VOLUME_HOST_PATH=${USER_INPUT}

  prompt "Create Local Persistent Volume? ${YES_NO}" ${INTALL_CLUSTER_PV}
  INTALL_CLUSTER_PV=${USER_INPUT}

  if [ $(isSelected ${USER_INPUT}) -eq 1 ]; then
    generateClusterPersistentVolumeManifest
  fi

  prompt "Install TLS Certificates for Service? ${YES_NO}" ${INSTALL_SERVICE_TLS}
  INSTALL_SERVICE_TLS=${USER_INPUT}

  if [ $(isSelected ${USER_INPUT}) -eq 1 ]; then
    generateServiceTLSManifest
  fi

  prompt "Install local image registry? ${YES_NO}" ${INSTALL_LOCAL_REGISTRY}
  INSTALL_LOCAL_REGISTRY=${USER_INPUT}

  if [ $(isSelected ${USER_INPUT}) -eq 1 ]; then
    generateClusterRegistryManifest
  fi
}

function generateClusterRegistryManifest() {
  LOCAL_REGISTRY_NAME="registry.${CLUSTER_DOMAIN}"
  prompt "Local registry name" "${LOCAL_REGISTRY_NAME}"
  LOCAL_REGISTRY_NAME=${USER_INPUT}

  prompt "Local registry host" "${LOCAL_REGISTRY_HOST}"
  LOCAL_REGISTRY_HOST=${USER_INPUT}

  prompt "Host path to for local registry" "${LOCAL_REGISTRY_VOL_HOSTPATH}"
  LOCAL_REGISTRY_VOL_HOSTPATH=${USER_INPUT}

  LOCAL_REGISTRY_MANIFEST="
registries:
  create:
    name: ${LOCAL_REGISTRY_NAME}
    host: \"${LOCAL_REGISTRY_HOST}\"
    hostPort: \"${LOCAL_REGISTRY_PORT}\"
    volumes:
      - ${LOCAL_REGISTRY_VOL_HOSTPATH}:/var/lib/registry
  config: |
    mirrors:
      docker.io:
        endpoint:
          - http://${LOCAL_REGISTRY_NAME}:5000
      \"${LOCAL_REGISTRY_NAME}:5000\":
        endpoint:
          - http://${LOCAL_REGISTRY_NAME}:5000
"
}

function generateServiceTLSManifest() {
  local TLS_KEY_FILE=${SCRIPT_DIR}/certs/${CLUSTER_DOMAIN}.key
  local TLS_CERT_FILE=${SCRIPT_DIR}/certs/${CLUSTER_DOMAIN}.crt

  prompt "TLS Key File" "${TLS_KEY_FILE}"
  TLS_KEY_FILE=${USER_INPUT}

  prompt "TLS Certificate File" "${TLS_CERT_FILE}"
  TLS_CERT_FILE=${USER_INPUT}

  if [[ ! -f "$TLS_CERT_FILE" || ! -f "$TLS_KEY_FILE" ]]; then
    echo "Error: One or both TLS files do not exist." >&2
    echo ${GREEN}==> ${RED}${BOLD_TXT}Error: One or both TLS files do not exist. ${NORMAL_TXT}${NOCOLOR} ${GREEN}<==${NOCOLOR}
    exit 1
  fi
  local TLS_KEY_FILE_BASE64="$(cat $TLS_KEY_FILE | base64 -w 0)"
  local TLS_CERT_FILE_BASE64="$(cat $TLS_CERT_FILE | base64 -w 0)"

  CLUSTER_TLS_MANIFEST="  - description: \" TLS Certificate for $CLUSTER_NAME services\"
    source: |
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/tls
      metadata:
        name: ${CLUSTER_NAME}-service-certs
        namespace: kube-system
      data:
        tls.crt: >-
          ${TLS_CERT_FILE_BASE64}
        tls.key: >-
          ${TLS_KEY_FILE_BASE64}
    destination: /var/lib/rancher/k3s/server/manifests/${CLUSTER_NAME}-service-certs.yaml
    nodeFilters:
      - \"server:*\"
"

}
function generateClusterPersistentVolumeManifest() {
  prompt "Persistent Volume Size (Gi)" "${CLUSTER_PV_SIZE}"
  CLUSTER_PV_SIZE=${USER_INPUT}

  CLUSTER_PV_MANIFEST="  - description: \" Persistant Volumes for $CLUSTER_NAME\"
    source: |
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: ${CLUSTER_NAME}-pv
        labels:
          type: local
      spec:
        capacity:
          storage: ${CLUSTER_PV_SIZE}Gi
        accessModes:
          - ReadWriteOnce
        persistentVolumeReclaimPolicy: Retain
        storageClassName: manual
        hostPath:
          path: /mnt/devship
    destination: /var/lib/rancher/k3s/server/manifests/${CLUSTER_NAME}-local-pv.yaml
    nodeFilters:
      - \"server:*\"
"
}

function checkAndGenerateClusterCustomManifest() {

  if [[ -z "$CLUSTER_PV_MANIFEST" && -z "$CLUSTER_TLS_MANIFEST" ]]; then
    CLUSTER_CUSTOM_MANIFESTS=""
    return
  fi
    CLUSTER_CUSTOM_MANIFESTS="
files:
${CLUSTER_PV_MANIFEST}
${CLUSTER_TLS_MANIFEST}
"
}

function generateClusterManifest() {
  header "Generating K3D cluster definition file"
  # For more check: https://github.com/rancher/k3d/blob/main/tests/assets/config_test_simple.yaml
  cat >${SCRIPT_DIR}/k3d-${CLUSTER_NAME}.tmp.yaml <<EOF
apiVersion: k3d.io/v1alpha5
kind: Simple
metadata:
  name: ${CLUSTER_NAME}
servers: ${SERVERS}
agents: ${AGENTS}
kubeAPI:
  hostIP: 0.0.0.0
  hostPort: "${CLUSTER_API_PORT}"
$CLUSTER_DOCKER_NETWORK_MANIFEST
image: rancher/k3s:${CLUSTER_K3S_IMAGE_TAG}
volumes:
  - volume: ${CLUSTER_VOLUME_HOST_PATH}:/mnt/${CLUSTER_NAME}
    nodeFilters:
      - all
ports:
  - port: 0.0.0.0:${LB_HTTPS_PORT}:443
    nodeFilters:
      - loadbalancer
  - port: 0.0.0.0:${LB_HTTP_PORT}:80
    nodeFilters:
      - loadbalancer
hostAliases:
  - ip: 1.1.1.1
    hostnames:
      - cloud.flare.dns
  - ip: 8.8.8.8
    hostnames:
      - google-dns

$LOCAL_REGISTRY_MANIFEST

options:
  k3d:
    wait: true
    timeout: 120s
    disableLoadbalancer: false
    disableImageVolume: false
    disableRollback: false
  k3s:
    extraArgs:
      ${K3S_TRAEFIK_ARGS}
      - arg: "--tls-san=*.${CLUSTER_DOMAIN}"
        nodeFilters:
          - server:*
      - arg: "--tls-san=127.0.0.1"
        nodeFilters:
          - server:*
      - arg: "--tls-san=localhost"
        nodeFilters:
          - server:*
    nodeLabels:
      - label: "CreatedBy=${USER}"
        nodeFilters:
          - server:*
          - agent:*

  # kubernetes configuration
  kubeconfig:
    updateDefaultKubeconfig: true
    switchCurrentContext: true
  runtime:
    gpuRequest: ""
    serversMemory: ""
    agentsMemory: ""
    labels:
      - label: CreatedBy=${USER}
        nodeFilters:
          - all

${CLUSTER_CUSTOM_MANIFESTS}
EOF
  cat <<EOF
${GREEN}Please check ${BLUE}${BOLD_TXT} ${SCRIPT_DIR}/k3d-${CLUSTER_NAME}.tmp.yaml${NORMAL_TXT}${NOCOLOR} ${GREEN}for customizing your cluster.
For more please check ${BLUE}https://github.com/rancher/k3d/blob/main/tests/assets/config_test_simple.yaml${NOCOLOR}

${GREEN}==> ${RED}${BOLD_TXT}It will DELETE any existing cluster named k3d-${CLUSTER_NAME}${NORMAL_TXT}${NOCOLOR} ${GREEN}<==${NOCOLOR}

EOF
  read -n 1 -srp "${BLUE}Press any key to continue...${NOCOLOR}"
  echo
  footer

}

function buildCluster() {
  header "Deleting Previous Cluster"
  k3d cluster delete ${CLUSTER_NAME}
  footer

  mkdir -p ${CLUSTER_VOLUME_HOST_PATH} ${LOCAL_REGISTRY_VOL_HOSTPATH}

  if [[ "$CONTAINER_RUNTIME" == "docker" ]]; then
      header "Building ${CLUSTER_NAME} with ${CONTAINER_RUNTIME}..."
    k3d cluster create --config ${SCRIPT_DIR}/k3d-${CLUSTER_NAME}.tmp.yaml
  else
    header "Building ${CLUSTER_NAME} with ${CONTAINER_RUNTIME}..."
    export DOCKER_HOST=unix:///run/podman/podman.sock
    export DOCKER_SOCK=/run/podman/podman.sock
    sudo --preserve-env=DOCKER_HOST --preserve-env=DOCKER_SOCK k3d cluster create --config ${SCRIPT_DIR}/k3d-${CLUSTER_NAME}.tmp.yaml
  fi
  footer

  header "Waiting for cluster init"
  sleep 5
  kubectl config use-context k3d-${CLUSTER_NAME}
  kubectl cluster-info
  footer
  rm -f ${SCRIPT_DIR}/k3d-${CLUSTER_NAME}.tmp.yaml
}


# ==================== AddOns Section ============================
function installAddons() {
  header "Installing Adons"
  # prompt "Install Ingress? ${YES_NO}" "${INSTALL_INGRESS}"
  # if [ $(isSelected ${USER_INPUT}) -eq 1 ]; then
  #   installIngress
  # fi

  prompt "Install Dashboard? ${YES_NO}" "${INSTALL_DASHBOARD}"
  if [ $(isSelected ${USER_INPUT}) -eq 1 ]; then

    local CUSTOM_DASHBOARD_VALUE_FILE=''
    if [ -f "${PWD}/extras/configs/dashboard.yaml" ]; then
      CUSTOM_DASHBOARD_VALUE_FILE="${PWD}/extras/dashboard.yaml"
    fi

    # Add kubernetes-dashboard repository
    helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
    helm install kubernetes-dashboard/kubernetes-dashboard --name kubernetes-dashboard -f $CUSTOM_DASHBOARD_VALUE_FILE
  fi
}

function main() {
  checkDependencies
  configValues
  checkAndGenerateClusterCustomManifest
  generateClusterManifest
  buildCluster
  installAddons
  header "Your ${CLUSTER_NAME} kubernetes cluster is ready for sailing. Happy voyage!!! 🚢 🚢 🚢"
}

main
